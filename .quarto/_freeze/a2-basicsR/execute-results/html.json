{
  "hash": "b1d6284b205e861e5d2c7373eee0a52b",
  "result": {
    "markdown": "# Some basic tasks in R {#sec-appendix-basicsR}\n\n\n## Importing a .csv file\n\nTh R function `read_csv()` will be used to import csv files that follows the format discussed in @sec-csv.  The function is illustrated  using the \"MLB salaries (2010)\" data set.  This .csv file of this dataset is located at the following URL: [http://www.csub.edu/~emontoya2/datasets/mlb2010.csv](http://www.csub.edu/~emontoya2/datasets/mlb2010.csv) To use `read_csv()`, it only  requires the location of the file (assuming the data was stored as discussed in @sec-csv).  If the data located at an URL, then use the URL .  If it is data  that is saved on your computer, then `file.choose()` will be used.   Both methods are covered.\n\n###  Importing data via a URL {-}\n\nThis approach only works if the *.csv* has a url location. The \"MLB salaries (2010)\" data set is located  at the following URL:\n\nLink: [http://www.csub.edu/~emontoya2/datasets/mlb2010.csv](http://www.csub.edu/~emontoya2/datasets/mlb2010.csv)\n\nTo import, run\n\n::: {.cell}\n\n```{.r .cell-code}\n# Note: read_csv() comes from the R package  readr, which\n# is part of the collection of packages when the package\n# tidyverse is loaded.\n\nlibrary( tidyverse ) # provides read_csv()\n\nmlbDataImport = read_csv( \"http://www.csub.edu/~emontoya2/datasets/mlb2010.csv\" )\n```\n:::\n\n\nNote that `read_csv()` reads in the data into R and we are assigning the resulting data frame to an object called `mlbDataImport`.  Since this object is a data frame, such objects are called data frame objects. The `mlbDataImport` data frame should now appear under the \"Environment tab\". \n\n\n::: {.callout-important icon=true}\n## URLs\n\nThe URL must be in quotations and NO spaces at the start after the quotation or right before the end of the quotation.  For example, you will get an error if you use the following urls\n\n+  `\" http://www.csub.edu/~emontoya2/datasets/mlb2010.csv\"`\n\n+  `\"http://www.csub.edu/~emontoya2/datasets/mlb2010.csv \"`\n\n+  `\" http://www.csub.edu/~emontoya2/datasets/mlb2010.csv \"`\n\nThey look similar to what we used but it has spaces within the quotation marks!\n\n:::\n\nWe can use R to obtain the names of the varialbes and other informatoin by using \n\nAn R function called `glimpse()` can provide the names of the variables and other information by using \n:\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse( mlbDataImport ) # make sure you have loaded the tidyverse package\n## Rows: 828\n## Columns: 4\n## $ player   <chr> \"Brandon Webb\", \"Danny Haren\", \"Chris Snyder\", \"Edwin Jackson~\n## $ team     <chr> \"Arizona Diamondbacks\", \"Arizona Diamondbacks\", \"Arizona Diam~\n## $ position <chr> \"Pitcher\", \"Pitcher\", \"Catcher\", \"Pitcher\", \"First Baseman\", ~\n## $ salary   <dbl> 8500.000, 8250.000, 5250.000, 4600.000, 4500.000, 4185.000, 3~\n```\n:::\n\n \nNote that this data frame has ...\n\n\n## Importing data from your computer {-}\n\nDownload the *.csv* file below onto your computer.  Make sure to  note where the file is saved. Depending on the browser settings, after clicking on the link below, the file will either open in the browser and it will be downloaded.  \n \n[http://www.csub.edu/~emontoya2/datasets/sampledata.csv](http://www.csub.edu/~emontoya2/datasets/sampledata.csv)\n\nAfter saving this *.csv* file, run the following\n\n::: {.cell}\n\n```{.r .cell-code}\n# by putting in \"file.choose()\", this tells R that you want to browse for and select the csv file\nImportFromDrive = read.csv( file.choose() )\n```\n:::\n\n::: {.cell}\n\n:::\n\nThis automatically opens a window that allows you to browse for your *.csv* file. Select your file and click on *Open*.  You should see the following in the console  \n![Importing data using `file.choose()` to specify file location ](images/filechoose.png)\n\nThe data set `ImportFromDrive` should appear in the *Environment* tab in the upper right panel where it displays the number of observations and variables. \n\nAlternatively, one can replace `file.choose()` with the location of your file in quotation marks.\n\n::: {.cell}\n\n```{.r .cell-code}\nmlbDataImport = read_csv( \"http://www.csub.edu/~emontoya2/datasets/mlb2010.csv\" )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 828 Columns: 4\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (3): player, team, position\ndbl (1): salary\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n \n\n## Using R functions \n\nR functions are either ready use when you start a new RStudio session or an R package must be loaded to use a function from that package.  The syntax of an R function consist of the function name followed by parentheses that contain argument(s). The R functions used in these modules will generally consists of the name of the data frame that is in tidy form and one or more of the following arguments:\n\n- Names of response variable as spelled in the data frame\n\n- Names of explanatory variable(s) as spelled in the data frame\n\n- additional optional arguments\n\nR has many built-in function or function that become available once a library is loaded. For example, the `mean( )` function computes the mean of sample of data. \n\ncombines, or concatenates terms together into a vector.\n\n##  Summarizing data with R\n\nExploring data using graphical and numerical summary statistics will be discussed in X.  For now, a brief introduction to graphing and computing summary statistics is provided.  When wanting to summarize a single variable, the formula to create graphical and numerical summaries follows the general form `goal( ~ x , data)` where `x` is the variable you want to graph or compute a statistic of. Depending on the summary, we may have to specify some additional things.  If the variable `x`  is a variable in the data frame, then data would be set equal to the name of the data frame. The names used for `x` and the name of the data frame must be the names that R has given the data set and variable. `goal` would be replaced with the name of the function.\n\nRecall that we imported the MLB dataset and we stored it in a data frame called `mlbDataImport`. Let's take a glimpse at the data\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse( mlbDataImport ) # make sure you have loaded the tidyverse package\n## Rows: 828\n## Columns: 4\n## $ player   <chr> \"Brandon Webb\", \"Danny Haren\", \"Chris Snyder\", \"Edwin Jackson~\n## $ team     <chr> \"Arizona Diamondbacks\", \"Arizona Diamondbacks\", \"Arizona Diam~\n## $ position <chr> \"Pitcher\", \"Pitcher\", \"Catcher\", \"Pitcher\", \"First Baseman\", ~\n## $ salary   <dbl> 8500.000, 8250.000, 5250.000, 4600.000, 4500.000, 4185.000, 3~\n```\n:::\n\n\n\nLet's create a histogram of `salary`.  `salary` represents the salary (in $1000s) of a given baseball player in 2010.  Again, the basic formula is `goal( ~ x , data)` where `goal` would be replaced with the name of the function to create the desired graph.  **RStudio** refers to histograms as `histogram()`:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lattice)\nhistogram( ~ salary  , data=  mlbDataImport )\n```\n\n::: {.cell-output-display}\n![](a2-basicsR_files/figure-html/gr2-1.png){width=528}\n:::\n:::\n\n\nLet's compute the mean salary of these baseball players.  Again, `salary` represents the salary of a given baseball player in 2010. As with the graph, the basic formula is `goal( ~ x , data)` where `goal` would be replaced with the name of the function to compute the desired sample statistic.  To compute the mean, **RStudio** calls its function `mean`:\n\n::: {.cell}\n\n```{.r .cell-code}\nmean( ~ salary  , data=  mlbDataImport )\n## [1] NA\n```\n:::\n\n\nSuppose you wanted to compute the average salary for each position. To so, we can tell RStudio to compute the mean by levels/groups of a grouping variable. A grouping variable groups data into categories or groups. Grouping variables are categorical variables.  When summaries are computed based on the levels or groups of the grouping variables, they are called side-by-side or comparative summaries. \n\nFor any  side-by-side or comparative data summary, the general formula changes a bit. The formula is `goal( ~ x | gfactor , data)`, where `gfactor` represent the grouping variable. In our example, the grouping variable is `position`:\n\n::: {.cell}\n\n```{.r .cell-code}\nmean( ~ salary | position , data=  mlbDataImport )\n## [1] NA\n```\n:::\n\n\nLet's create a boxplot of `salary` for each position: \n\n::: {.cell}\n\n```{.r .cell-code}\nbwplot( ~ salary | position , data=  mlbDataImport )\n```\n\n::: {.cell-output-display}\n![](a2-basicsR_files/figure-html/gr4-1.png){width=528}\n:::\n:::\n",
    "supporting": [
      "a2-basicsR_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}